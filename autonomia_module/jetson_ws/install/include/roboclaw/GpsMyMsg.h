// Generated by gencpp from file roboclaw/GpsMyMsg.msg
// DO NOT EDIT!


#ifndef ROBOCLAW_MESSAGE_GPSMYMSG_H
#define ROBOCLAW_MESSAGE_GPSMYMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboclaw
{
template <class ContainerAllocator>
struct GpsMyMsg_
{
  typedef GpsMyMsg_<ContainerAllocator> Type;

  GpsMyMsg_()
    : lat(0.0)
    , lon(0.0)
    , speed(0.0)
    , angle(0.0)
    , quality(0)
    , satellites(0)  {
    }
  GpsMyMsg_(const ContainerAllocator& _alloc)
    : lat(0.0)
    , lon(0.0)
    , speed(0.0)
    , angle(0.0)
    , quality(0)
    , satellites(0)  {
  (void)_alloc;
    }



   typedef double _lat_type;
  _lat_type lat;

   typedef double _lon_type;
  _lon_type lon;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _angle_type;
  _angle_type angle;

   typedef int32_t _quality_type;
  _quality_type quality;

   typedef int32_t _satellites_type;
  _satellites_type satellites;





  typedef boost::shared_ptr< ::roboclaw::GpsMyMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboclaw::GpsMyMsg_<ContainerAllocator> const> ConstPtr;

}; // struct GpsMyMsg_

typedef ::roboclaw::GpsMyMsg_<std::allocator<void> > GpsMyMsg;

typedef boost::shared_ptr< ::roboclaw::GpsMyMsg > GpsMyMsgPtr;
typedef boost::shared_ptr< ::roboclaw::GpsMyMsg const> GpsMyMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboclaw::GpsMyMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboclaw::GpsMyMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roboclaw

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'roboclaw': ['/home/nvidia/jetson_ws/src/motor_controller/roboclaw/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roboclaw::GpsMyMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboclaw::GpsMyMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboclaw::GpsMyMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboclaw::GpsMyMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboclaw::GpsMyMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboclaw::GpsMyMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboclaw::GpsMyMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88a6598ae0961e760a0b9c9f6312cd3d";
  }

  static const char* value(const ::roboclaw::GpsMyMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88a6598ae0961e76ULL;
  static const uint64_t static_value2 = 0x0a0b9c9f6312cd3dULL;
};

template<class ContainerAllocator>
struct DataType< ::roboclaw::GpsMyMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboclaw/GpsMyMsg";
  }

  static const char* value(const ::roboclaw::GpsMyMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboclaw::GpsMyMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 lat\n\
float64 lon\n\
float64 speed\n\
float64 angle\n\
int32 quality\n\
int32 satellites\n\
";
  }

  static const char* value(const ::roboclaw::GpsMyMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboclaw::GpsMyMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.speed);
      stream.next(m.angle);
      stream.next(m.quality);
      stream.next(m.satellites);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GpsMyMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboclaw::GpsMyMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboclaw::GpsMyMsg_<ContainerAllocator>& v)
  {
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "quality: ";
    Printer<int32_t>::stream(s, indent + "  ", v.quality);
    s << indent << "satellites: ";
    Printer<int32_t>::stream(s, indent + "  ", v.satellites);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOCLAW_MESSAGE_GPSMYMSG_H
